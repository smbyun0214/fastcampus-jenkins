pipeline {
    agent any
    
    environment {
        SONAR_SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    }
    
    triggers {
        githubPush()
    }
    
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/smbyun0214/fastcampus-jenkins')
    }

    
    parameters {
        booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLE')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: 'origin/main']],
                    userRemoteConfigs: [[
                        credentialsId: 'github-ssh',
                        url: 'git@github.com:smbyun0214/fastcampus-jenkins.git']],
                    extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'projects/spring-app']]]])
            }
        }
        
        stage('Build') {
            steps {
                dir("projects/spring-app") {
                    withGradle {
                        sh "./gradlew build"
                    }
                }
            }
        }
        
        stage('SonarScanner') {
            steps {
                withSonarQubeEnv("sonarqube-server") {
                    sh """
                    ${env.SONAR_SCANNER_HOME}/bin/sonar-scanner \
                      -Dsonar.host.url=http://10.211.55.17:9000 \
                      -Dsonar.projectKey=practice1 \
                      -Dsonar.projectBaseDir=${WORKSPACE}/projects/spring-app
                    """
                }
                
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
    
    post {
        always {
            scanForIssues tool: ktLint(pattern: '**/ktlint/**/*.xml')
            junit '**/test-results/**/*.xml'
            jacoco sourcePattern: '**/src/main/kotlin'
            mineRepository()
        }
        
        success {
            archiveArtifacts artifacts: 'projects/spring-app/build/libs/*-SNAPSHOT.jar'
            script {
                if (params.DEPLOY_ENABLED == true) {
                    build(
                        job: 'pipeline-deploy',
                        parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "true")],
                        wait: false,
                        propagate: false
                    )
                }
            }
        }
    }
}
